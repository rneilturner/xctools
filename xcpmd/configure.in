dnl
dnl
dnl configure.in.head:
dnl
dnl $Id:$
dnl
dnl $Log:$
dnl
dnl
dnl
AC_PREREQ(2.13)
AC_INIT(src/xcpmd.c)

LT_INIT

AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_AWK
AC_CHECK_PROG(MD5SUM,md5sum,md5sum)
AC_CHECK_PROG(GREP,grep,grep)

AC_SYS_LARGEFILE

PKG_CHECK_MODULES([LIBXCXENSTORE],[libxcxenstore])
PKG_CHECK_MODULES([LIBNL], [libnl-3.0])
PKG_CHECK_MODULES([LIBNL_GENL], [libnl-genl-3.0])

XCPMD_MAJOR_VERSION=`cat $srcdir/version-major`
XCPMD_MINOR_VERSION=`cat $srcdir/version-minor`
XCPMD_MICRO_VERSION=`cat $srcdir/version-micro`


XCPMD_VERSION=$XCPMD_MAJOR_VERSION.$XCPMD_MINOR_VERSION.$XCPMD_MICRO_VERSION

AC_SUBST(XCPMD_MAJOR_VERSION)
AC_SUBST(XCPMD_MINOR_VERSION)
AC_SUBST(XCPMD_MICRO_VERSION)
AC_SUBST(XCPMD_VERSION)


VERSION=$XCPMD_VERSION
PACKAGE=xcpmd

AM_INIT_AUTOMAKE($PACKAGE,$VERSION)

AC_CHECK_PROG(CPROTO,cproto,cproto)
AM_CONFIG_HEADER(src/config.h)

# Checks for header files.
AC_CHECK_HEADERS([malloc.h])
AC_HEADER_STDC
AC_FUNC_MALLOC

AC_C_INLINE
AC_C_CONST

AC_ARG_WITH(idldir,AC_HELP_STRING([--with-idldir=PATH],[Path to dbus idl desription files]),
                IDLDIR=$with_idldir,IDLDIR=/usr/share/idl)
AC_ARG_WITH(rpcgen-templates,AC_HELP_STRING([--with-rpcgen-templates=PATH],[Path to xc-rpcgen template files]),
                RPCGEN_TEMPLATES=$with_rpcgen_templates,RPCGEN_TEMPLATES=)

AC_SUBST(IDLDIR)
AC_SUBST(RPCGEN_TEMPLATES)

AC_CHECK_PROG(XC_RPCGEN,xc-rpcgen,xc-rpcgen)

dnl --xenstore--

LIBXENSTORE_PREFIX=no
AC_ARG_WITH([libxenstore],
            AC_HELP_STRING([--with-libxenstore=PATH], [Path to prefix where libxenstore was installed.]),
            [LIBXENSTORE_PREFIX=$with_libxenstore], [])

case "x$LIBXENSTORE_PREFIX" in
        x|xno|xyes)
                LIBXENSTORE_INC=""
                LIBXENSTORE_LIB="-lxenstore"
                ;;
        *)
                LIBXENSTORE_INC="-I${LIBXENSTORE_PREFIX}/include"
                LIBXENSTORE_LIB="-L${LIBXENSTORE_PREFIX}/lib -lxenstore"
                ;;
esac

AC_SUBST(LIBXENSTORE_INC)
AC_SUBST(LIBXENSTORE_LIB)

have_libxenstore=true

ORIG_LDFLAGS="${LDFLAGS}"
ORIG_CPPFLAGS="${CPPFLAGS}"
	LDFLAGS="${LDFLAGS} ${LIBXENSTORE_LIB}"
	CPPFLAGS="${CPPFLAGS} ${LIBXENSTORE_INC}"
	AC_CHECK_HEADERS([xs.h], [], [have_libxenstore=false])
	AC_CHECK_FUNC(xs_domain_open, [], [have_libxenstore=false])
LDFLAGS="${ORIG_LDFLAGS}"
CPPFLAGS="${ORIG_CPPFLAGS}"

if test "x$have_libxenstore" = "xfalse"; then
	AC_MSG_ERROR([xenstore - where is libxenstore mang?])
fi

dnl --xclib--

LIBXC_PREFIX=no
AC_ARG_WITH(libxc,
	AC_HELP_STRING([--with-libxc=PATH],[Path to prefix where where libxc and xen were installed]),
		LIBXC_PREFIX=$with_libxc,[])


case "x$LIBXC_PREFIX" in
	xno)
		LIBXC_INC=""
		LIBXC_LIB=-lxenctrl
		;;
	xyes) 
		LIBXC_INC=""
		LIBXC_LIB=-lxenctrl
		;;
	*)
		LIBXC_INC="-I${LIBXC_PREFIX}/include"
		LIBXC_LIB="-L${LIBXC_PREFIX}/lib -lxenctrl"
		;;
esac

AC_SUBST(LIBXC_INC)
AC_SUBST(LIBXC_LIB)

ORIG_LDFLAGS="${LDFLAGS}"
ORIG_CFLAGS="${CFLAGS}"

	have_libxenctrl=true

	LDFLAGS="${LDFLAGS} ${LIBXC_LIB}" 
	CFLAGS="${CFLAGS} ${LIBXC_INC}" 

	AC_CHECK_HEADERS([xenctrl.h],[],[have_libxenctrl=false])
	AC_CHECK_FUNC(xc_version,[],[have_libxenctrl=false])
	AC_CHECK_FUNC(xc_domain_iommu_x_mapping,[],[have_libxenctrl=false])

LDFLAGS="${ORIG_LDFLAGS}"
CFLAGS="${ORIG_CFLAGS}"

if [ "x$have_libxenctrl" != "xtrue" ]; then
	AC_MSG_WARN(xclib - disabling xen bits by default as libxenctrl lacks xc_domain_iommu_x_mapping)
else 
	AC_MSG_WARN(xclib - found xen bits)
fi

AM_CONDITIONAL(HAVE_LIBXENCTRL, test "x$have_libxenctrl" = "xtrue")

dnl --xcdbus--

LIBXCDBUS_CONFIG=no
AC_ARG_WITH(libxcdbus,
        AC_HELP_STRING([--with-libxcdbus=PATH],[Path to libxcdbus-config]),
                LIBXCDBUS_CONFIG=$with_libxcdbus,LIBXCDBUS_CONFIG=no)

case "x$LIBXCDBUS_CONFIG" in
        xno)
		AC_PATH_PROG(LIBXCDBUS_CONFIG, libxcdbus-config, no)
        ;;
        x|xyes)
		AC_PATH_PROG(LIBXCDBUS_CONFIG, libxcdbus-config, no)
        ;;
        *)
        ;;
esac

if ! test -x $LIBXCDBUS_CONFIG; then
  PKG_CHECK_MODULES([LIBXCDBUS], [libxcdbus])
  LIBXCDBUS_INC="$LIBXCDBUS_CFLAGS"
  LIBXCDBUS_LIB="$LIBXCDBUS_LIBS"
else
 LIBXCDBUS_INC=`$LIBXCDBUS_CONFIG --cflags`
 LIBXCDBUS_LIB=`$LIBXCDBUS_CONFIG --libs`
fi

AC_SUBST(LIBXCDBUS_INC)
AC_SUBST(LIBXCDBUS_LIB)

dnl --dbus_glib--

DBUS_GLIB_1_CONFIG=no
AC_ARG_WITH(dbus-glib-1,
        AC_HELP_STRING([--with-dbus-glib-1=PATH],[Path to dbus-glib-1-config]),
                DBUS_GLIB_1_CONFIG=$with_dbus-glib-1,DBUS_GLIB_1_CONFIG=no)

case "x$DBUS_GLIB_1_CONFIG" in
        xno)
		AC_PATH_PROG(DBUS_GLIB_1_CONFIG, dbus-glib-1-config, no)
        ;;
        x|xyes)
		AC_PATH_PROG(DBUS_GLIB_1_CONFIG, dbus-glib-1-config, no)
        ;;
        *)
        ;;
esac

if ! test -x $DBUS_GLIB_1_CONFIG; then
  PKG_CHECK_MODULES([DBUS_GLIB_1],[dbus-glib-1]);
  DBUS_GLIB_1_INC="$DBUS_GLIB_1_CFLAGS"
  DBUS_GLIB_1_LIB="$DBUS_GLIB_1_LIBS"
else
  DBUS_GLIB_1_INC=`$DBUS_GLIB_1_CONFIG --cflags`
  DBUS_GLIB_1_LIB=`$DBUS_GLIB_1_CONFIG --libs`
fi

AC_SUBST(DBUS_GLIB_1_INC)
AC_SUBST(DBUS_GLIB_1_LIB)


dnl --glib--

GLIB_20_CONFIG=no
AC_ARG_WITH(glib-2.0,
        AC_HELP_STRING([--with-glib-2.0=PATH],[Path to glib-2.0-config]),
                GLIB_20_CONFIG=$with_glib-2.0,GLIB_20_CONFIG=no)

case "x$GLIB_20_CONFIG" in
        xno)
		AC_PATH_PROG(GLIB_20_CONFIG, glib-2.0-config, no)
        ;;
        x|xyes)
		AC_PATH_PROG(GLIB_20_CONFIG, glib-2.0-config, no)
        ;;
        *)
        ;;
esac

if ! test -x $GLIB_20_CONFIG; then
  PKG_CHECK_MODULES([GLIB_20],[glib-2.0]);
  DBUS_20_INC="$GLIB_20_CFLAGS"
  DBUS_20_LIB="$GLIB_20_LIBS"
else 
  GLIB_20_INC=`$GLIB_20_CONFIG --cflags`
  GLIB_20_LIB=`$GLIB_20_CONFIG --libs`
fi

AC_SUBST(GLIB_20_INC)
AC_SUBST(GLIB_20_LIB)



AC_OUTPUT([Makefile
	   src/Makefile])

